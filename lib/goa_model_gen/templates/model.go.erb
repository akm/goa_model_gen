package model

import (
  "fmt"
  "time"

  "golang.org/x/net/context"
	"google.golang.org/appengine/datastore"
	"google.golang.org/appengine/log"

<%- if types.select(&:store?).any?{|m| m.goon && m.goon['id'] == 'UUID'} -%>
	"github.com/goadesign/goa/uuid"
<%- end -%>

<%- if types.any?(&:store?) -%>
	"github.com/mjibson/goon"
<%- end -%>
)

<%- types.each do |type| -%>
<%-   if !type.fields.empty? -%>
type <%= type.name %> struct {
<%-     if type.goon -%>
	Id <%= type.id_type %> `datastore:"-" goon:"id" json:"id"`
<%-       if type.goon && type.goon['ancestor'] -%>
	Parent *datastore.Key `datastore:"-" goon:"parent" json:"-"`
<%-       end -%>
<%-     end -%>
<%-     type.fields.each do |field| -%>
	<%= field.name %> <%= field.type %> `<%= field.tag %>`
<%-     end -%>
}
<%-   elsif type.base -%>
type <%= type.name %> <%= type.base %>

<%-     if type.enum_items -%>
const (
<%-       type.enum_items.each do |item| -%>
  <%= item.camelize %> <%= type.name %> = <%= item.inspect %>
<%-       end -%>
)
<%-     end -%>
<%-   end -%>

<%- end -%>

<%- types.select(&:store?).each do |model| -%>
func (m *<%= model.name %>) PrepareToCreate() error {
<%- if model.fields.any?{|f| f.name == "CreatedAt"} -%>
	if m.CreatedAt.IsZero() {
		m.CreatedAt = time.Now()
	}
<%- end -%>
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	if m.UpdatedAt.IsZero() {
		m.UpdatedAt = time.Now()
	}
<%- end -%>
	return nil
}

func (m *<%= model.name %>) PrepareToUpdate() error {
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	m.UpdatedAt = time.Now()
<%- end -%>
	return nil
}

<%- end -%>

<%- types.select(&:store?).each do |model| -%>
<%- store_name = "#{model.name}Store" -%>
type <%= store_name %> struct{
<%- if model.goon && model.goon['ancestor'] -%>
	ParentKey *datastore.Key
<%- end -%>
}

func (s *<%= store_name %>) GetAll(ctx context.Context) ([]*<%= model.name %>, error) {
	g := goon.FromContext(ctx)
	r := []*<%= model.name %>{}
	k := g.Kind(new(<%= model.name %>))
	log.Infof(ctx, "Kind is %v\n", k)
	q := datastore.NewQuery(k)
<%- if model.goon && model.goon['ancestor'] -%>
	q = q.Ancestor(s.ParentKey)
<%- end -%>
	log.Infof(ctx, "q is %v\n", q)
	_, err := g.GetAll(q.EventualConsistency(), &r)
	if err != nil {
		log.Errorf(ctx, "Failed to GetAll <%= model.name %> because of %v\n", err)
		return nil, err
	}
	return r, nil
}

func (s *<%= store_name %>) Get(ctx context.Context, id string) (*<%= model.name %>, error) {
	g := goon.FromContext(ctx)
	r := <%= model.name %>{Id: id}
<%- if model.goon && model.goon['ancestor'] -%>
  if s.ParentKey != nil {
    r.Parent = s.ParentKey
  }
<%- end -%>
	err := g.Get(&r)
	if err != nil {
		log.Errorf(ctx, "Failed to Get <%= model.name %> because of %v\n", err)
		return nil, err
	}
<%- if model.goon && model.goon['ancestor'] -%>
	if err := s.ValidateParent(&r); err != nil {
		log.Errorf(ctx, "Invalid parent key for <%= model.name %> because of %v\n", err)
		return nil, err
	}
<%- end -%>

	return &r, nil
}

func (s *<%= store_name %>) Create(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
  err := m.PrepareToCreate()
  if err != nil {
    return nil, err
  }
	return s.ValidateAndPut(ctx, m)
}

func (s *<%= store_name %>) Update(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
  err := m.PrepareToUpdate()
  if err != nil {
    return nil, err
  }
	return s.ValidateAndPut(ctx, m)
}

func (s *<%= store_name %>) ValidateAndPut(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
	err := m.Validate()
	if err != nil {
		return nil, err
	}
	return s.Put(ctx, m)
}

func (s *<%= store_name %>) Put(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
	g := goon.FromContext(ctx)
<%- if model.goon && model.goon['id'] == 'UUID' -%>
	if m.Id == "" {
		m.Id = uuid.NewV4().String()
	}
<%- end -%>
<%- if model.goon && model.goon['ancestor'] -%>
	if err := s.ValidateParent(m); err != nil {
		log.Errorf(ctx, "Invalid parent key for <%= model.name %> because of %v\n", err)
		return nil, err
	}
<%- end -%>
	key, err := g.Put(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Put %v because of %v\n", m, err)
		return nil, err
	}
	return key, nil
}

<%- if model.goon && model.goon['ancestor'] -%>
func (s *<%= store_name %>) ValidateParent(m *<%= model.name %>) error {
	if s.ParentKey == nil {
	  return nil
	}
	if m.Parent == nil {
		m.Parent = s.ParentKey
	}
	if !s.ParentKey.Equal(m.Parent) {
	  return fmt.Errorf("Invalid Parent for %v", m)
	}
	return nil
}

func (s *<%= store_name %>) Delete(ctx context.Context, m *<%= model.name %>) error {
	g := goon.FromContext(ctx)
	key, err := g.KeyError(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Get %v because of %v\n", m, err)
		return err
	}
	err = g.Delete(key)
	if err != nil {
		log.Errorf(ctx, "Failed to Delete %v because of %v\n", m, err)
		return err
	}
	return nil
}

<%- end -%>

<%- end -%>
