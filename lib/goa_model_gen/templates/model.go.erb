package model

import (
  "fmt"
  "time"

  "golang.org/x/net/context"
	"google.golang.org/appengine/datastore"
	"google.golang.org/appengine/log"

<%- if types.select(&:store?).any?{|m| m.goon['id_type'] == 'UUID'} -%>
	"github.com/goadesign/goa/uuid"
<%- end -%>
)

<%- types.each do |type| -%>
<%-   if !type.fields.empty? -%>
type <%= type.name %> struct {
<%-     if type.goon -%>
	<%= type.id_name %> <%= type.id_golang_type %> `datastore:"-" goon:"id" json:"<%= type.id_name.underscore %>"`
<%-       if type.parent -%>
	ParentKey *datastore.Key `datastore:"-" goon:"parent" json:"-"`
<%-       end -%>
<%-     end -%>
<%-     type.fields.each do |field| -%>
	<%= field.name %> <%= field.type %> `<%= field.tag %>`
<%-     end -%>
}
<%-   elsif type.base -%>
type <%= type.name %> <%= type.base %>

<%-     if type.enum_items -%>
const (
<%-       type.enum_items.each do |item| -%>
  <%= item.camelize %> <%= type.name %> = <%= item.inspect %>
<%-       end -%>
)
<%-     end -%>
<%-   end -%>

<%- end -%>

<%- types.select(&:store?).each do |model| -%>
func (m *<%= model.name %>) PrepareToCreate() error {
<%- if model.fields.any?{|f| f.name == "CreatedAt"} -%>
	if m.CreatedAt.IsZero() {
		m.CreatedAt = time.Now()
	}
<%- end -%>
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	if m.UpdatedAt.IsZero() {
		m.UpdatedAt = time.Now()
	}
<%- end -%>
	return nil
}

func (m *<%= model.name %>) PrepareToUpdate() error {
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	m.UpdatedAt = time.Now()
<%- end -%>
	return nil
}

<%-   if model.parent -%>
func (m *<%= model.name %>) Parent(ctx context.Context) (*<%= model.parent %>, error) {
  parentStore := &<%= model.parent %>Store{}
	return parentStore.ByKey(ctx, m.ParentKey)
}
<%-   end -%>

<%- end -%>

<%- types.select(&:store?).each do |model| -%>
<%- store_name = "#{model.name}Store" -%>
type <%= store_name %> struct{
<%- if model.parent -%>
	ParentKey *datastore.Key
<%- end -%>
}

func (s *<%= store_name %>) All(ctx context.Context) ([]*<%= model.name %>, error) {
	return s.Select(ctx, s.Query(ctx))
}

func (s *<%= store_name %>) Select(ctx context.Context, q *datastore.Query) ([]*<%= model.name %>, error) {
	g := GoonFromContext(ctx)
	r := []*<%= model.name %>{}
	log.Infof(ctx, "q is %v\n", q)
	_, err := g.GetAll(q.EventualConsistency(), &r)
	if err != nil {
		log.Errorf(ctx, "Failed to Select <%= model.name %> because of %v\n", err)
		return nil, err
	}
	return r, nil
}

func (s *<%= store_name %>) Query(ctx context.Context) *datastore.Query {
	g := GoonFromContext(ctx)
	k := g.Kind(new(<%= model.name %>))
	// log.Infof(ctx, "Kind for <%= model.name %> is %v\n", k)
	return datastore.NewQuery(k)
}

func (s *<%= store_name %>) ByID(ctx context.Context, <%= model.id_name_var %> <%= model.id_golang_type %>) (*<%= model.name %>, error) {
<%- if model.parent -%>
	r := <%= model.name %>{ParentKey: s.ParentKey, <%= model.id_name %>: <%= model.id_name_var %>}
<%- else -%>
	r := <%= model.name %>{<%= model.id_name %>: <%= model.id_name_var %>}
<%- end -%>
  err := s.Get(ctx, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *<%= store_name %>) ByKey(ctx context.Context, key *datastore.Key) (*<%= model.name %>, error) {
	if err := s.IsValidKey(ctx, key); err != nil {
		log.Errorf(ctx, "<%= store_name %>.ByKey got Invalid key: %v because of %v\n", key, err)
		return nil, err
	}

<%- if model.parent -%>
	r := <%= model.name %>{ParentKey: key.Parent(), <%= model.id_name %>: key.<%= model.key_id_method %>()}
<%- else -%>
	r := <%= model.name %>{<%= model.id_name %>: key.<%= model.key_id_method %>()}
<%- end -%>
	err := s.Get(ctx, &r)
	if err != nil {
		return nil, err
	}
	return &r, nil
}

func (s *<%= store_name %>) Get(ctx context.Context, m *<%= model.name %>) error {
	g := GoonFromContext(ctx)
	err := g.Get(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Get <%= model.name %> because of %v\n", err)
		return err
	}
<%- if model.parent -%>
	if err := s.ValidateParent(m); err != nil {
		log.Errorf(ctx, "Invalid parent key for <%= model.name %> because of %v\n", err)
		return err
	}
<%- end -%>

	return nil
}

func (s *<%= store_name %>) IsValidKey(ctx context.Context, key *datastore.Key) error {
	if key == nil {
		return fmt.Errorf("key is nil")
	}
	g := GoonFromContext(ctx)
	expected := g.Kind(&<%= model.name %>{})
	if key.Kind() != expected {
		return fmt.Errorf("key kind must be %s but was %s", expected, key.Kind())
	}
<%- if model.parent -%>
	if key.Parent() == nil {
		return fmt.Errorf("key parent must not be nil but was nil")
	}
<%- end -%>
	return nil
}

func (s *<%= store_name %>) Exist(ctx context.Context, m *<%= model.name %>) (bool, error) {
	g := GoonFromContext(ctx)
	key, err := g.KeyError(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Get Key of %v because of %v\n", m, err)
		return false, err
	}
	_, err = s.ByKey(ctx, key)
	if err == datastore.ErrNoSuchEntity {
		return false, nil
	} else if err != nil {
		log.Errorf(ctx, "Failed to get existance of %v because of %v\n", m, err)
		return false, err
	} else {
		return true, nil
	}
}

func (s *<%= store_name %>) Create(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
  err := m.PrepareToCreate()
  if err != nil {
    return nil, err
  }
	if err := m.Validate(); err != nil {
		return nil, err
	}

<%- if model.goon['id_type'] == 'string' -%>
	exist, err := s.Exist(ctx, m)
	if err != nil {
		return nil, err
	}
	if exist {
		log.Errorf(ctx, "Failed to create %v because of another entity has same key\n", m)
		return nil, fmt.Errorf("Duplicate <%= model.goon['id_name'] %> error: %q of %v\n", m.<%= model.goon['id_name'] %>, m)
	}
<%- end -%>

  return s.Put(ctx, m)
}

func (s *<%= store_name %>) Update(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
  err := m.PrepareToUpdate()
  if err != nil {
    return nil, err
  }
	if err := m.Validate(); err != nil {
		return nil, err
	}

<%- if model.goon['id_type'] == 'string' -%>
	exist, err := s.Exist(ctx, m)
	if err != nil {
		return nil, err
	}
	if !exist {
		log.Errorf(ctx, "Failed to update %v because it doesn't exist\n", m)
		return nil, fmt.Errorf("No data to update %q of %v\n", m.<%= model.goon['id_name'] %>, m)
	}
<%- end -%>

  return s.Put(ctx, m)
}

func (s *<%= store_name %>) Put(ctx context.Context, m *<%= model.name %>) (*datastore.Key, error) {
<%- if model.goon['id_type'] == 'UUID' -%>
	if m.Id == "" {
		m.Id = uuid.NewV4().String()
	}
<%- end -%>
<%- if model.parent -%>
	if err := s.ValidateParent(m); err != nil {
		log.Errorf(ctx, "Invalid parent key for <%= model.name %> because of %v\n", err)
		return nil, err
	}
<%- end -%>
	g := GoonFromContext(ctx)
	key, err := g.Put(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Put %v because of %v\n", m, err)
		return nil, err
	}
	return key, nil
}

<%- if model.parent -%>
func (s *<%= store_name %>) ValidateParent(m *<%= model.name %>) error {
	if s.ParentKey == nil {
	  return nil
	}
	if m.ParentKey == nil {
		m.ParentKey = s.ParentKey
	}
	if !s.ParentKey.Equal(m.ParentKey) {
	  return fmt.Errorf("Invalid ParentKey for %v", m)
	}
	return nil
}

<%- end -%>
func (s *<%= store_name %>) Delete(ctx context.Context, m *<%= model.name %>) error {
	g := GoonFromContext(ctx)
	key, err := g.KeyError(m)
	if err != nil {
		log.Errorf(ctx, "Failed to Get key of %v because of %v\n", m, err)
		return err
	}
	if err := g.Delete(key); err != nil {
		log.Errorf(ctx, "Failed to Delete %v because of %v\n", m, err)
		return err
	}
	return nil
}

<%- end -%>
