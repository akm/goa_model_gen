<%- package "model" -%>

<%- source_file.types.each do |type| -%>
<%-   if !type.fields.empty? -%>
<%-
        type.field_type_packages.each do |pkg|
          import(PACKAGE_FOR_IMPORT[pkg] || pkg)
        end
-%>
type <%= type.name %> struct {
<%-     if type.goon -%>
	<%= type.id_definition %>
<%-       if type.parent -%>
<%-         import "google.golang.org/appengine/datastore" -%>
	ParentKey *datastore.Key `datastore:"-" goon:"parent" json:"-"`
<%-       end -%>
<%-     end -%>
<%-     type.fields.each do |field| -%>
	<%= field.definition %>
<%-     end -%>
}
<%-   elsif type.base -%>
type <%= type.name %> <%= type.base %>

<%-     if type.enum_items -%>
const (
<%-       type.enum_items.each do |item| -%>
  <%= item.camelize %> <%= type.name %> = <%= item.inspect %>
<%-       end -%>
)
<%-     end -%>

<%-     if type.enum_map -%>
const (
<%-       type.enum_map.each do |key, name| -%>
  <%= type.name %><%= name.camelize %> <%= type.name %> = <%= key.inspect %>
<%-       end -%>
)

var <%= type.name %>Map = map[<%= type.name %>]string{
<%-       type.enum_map.each do |key, name| -%>
  <%= key.inspect %>: <%= name.inspect %>,
<%-       end -%>
}

func (t <%= type.name %>) String() string {
  return <%= type.name %>Map[t]
}

var <%= type.name %>NameToValue = map[string]<%= type.name %>{
<%-       type.enum_map.each do |key, name| -%>
  <%= name.inspect %>: <%= key.inspect %>,
<%-       end -%>
}

func StringTo<%= type.name %>(s string) (<%= type.name %>, error) {
  val, ok := <%= type.name %>NameToValue[s]
  if ok {
    return val, nil
  } else {
    err := &InvalidEnumName{Name: s}
    return <%= type.name %><%= type.enum_map[type.enum_map.keys.first].camelize %>, err
  }
}


func <%= type.name %>ToString(v <%= type.name %>) string {
  return v.String()
}

<%-     end -%>

<%-   end -%>

<%- end -%>

<%- source_file.types.select(&:store?).each do |model| -%>
func (m *<%= model.name %>) Assign(ref *Ref<%= model.id_golang_type.camelize %>) error {
	ref.ID = m.ID
<%-   if model.ref_name.present? -%>
	ref.Name = m.<%= model.ref_name %>
<%-   end -%>
	return nil
}

func (m *<%= model.name %>) PrepareToCreate() error {
  m.PrepareFields()
<%- if model.fields.any?{|f| f.name == "CreatedAt"} -%>
	if m.CreatedAt.IsZero() {
		m.CreatedAt = time.Now()
	}
<%- end -%>
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	if m.UpdatedAt.IsZero() {
		m.UpdatedAt = time.Now()
	}
<%- end -%>
	return nil
}

func (m *<%= model.name %>) PrepareToUpdate() error {
	m.PrepareFields()
<%- if model.fields.any?{|f| f.name == "UpdatedAt"} -%>
	m.UpdatedAt = time.Now()
<%- end -%>
	return nil
}

func (m *<%= model.name %>) PrepareFields() error {
<%- model.fields.each do |field| -%>
<%-   if field.prepare_method.present? -%>
  m.<%= field.name %> = m.<%= field.name %>.<%= field.prepare_method %>()
<%-   end -%>
<%- end -%>
	return nil
}

func (m *<%= model.name %>) IsPersisted() bool {
	return m.ID != <%= model.id_field.zero_value_expression %>
}

<%-   if model.parent -%>
<%-     import "context" -%>
func (m *<%= model.name %>) Parent(ctx context.Context) (*<%= model.parent %>, error) {
  parentStore := &<%= model.parent %>Store{}
	return parentStore.ByKey(ctx, m.ParentKey)
}
<%-   end -%>

<%- end -%>
