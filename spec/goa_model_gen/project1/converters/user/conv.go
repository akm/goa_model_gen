// DO NOT EDIT this file.

package user

import (
	"github.com/akm/goa_model_gen/project1/converters"
	gen "github.com/akm/goa_model_gen/project1/gen/user"
	"github.com/akm/goa_model_gen/project1/model"
)

func UserPayloadToModel(payload *gen.UserPayload) (*model.User, error) {
	m := &model.User{}
	if err := CopyFromUserPayloadToModel(payload, m); err != nil {
		return nil, err
	}
	return m, nil
}

func CopyFromUserPayloadToModel(payload *gen.UserPayload, m *model.User) error {
	if payload == nil {
		return converters.NoPayloadGiven
	}
	if m == nil {
		return converters.NoModelGiven
	}

	// ID not found in UserPayload fields
	m.Email = payload.Email
	m.AuthDomain = payload.AuthDomain
	m.Admin = payload.Admin
	if payload.UserType != nil {
		if v, err := converters.StringToUserType(*payload.UserType); err != nil {
			return err
		} else {
			m.UserType = v
		}
	}
	// ClientId not found in UserPayload fields
	// FederatedIdentity not found in UserPayload fields
	// FederatedProvider not found in UserPayload fields
	// CreatedAt not found in UserPayload fields
	// UpdatedAt not found in UserPayload fields
	return nil
}

func UserModelToResult(m *model.User) (*gen.User, error) {
	if m == nil {
		return nil, converters.NoModelGiven
	}
	r := &gen.User{}

	if v, err := converters.StringToInt64(m.ID); err != nil {
		return err
	} else {
		r.ID = v
	}
	r.Email = m.Email
	// AuthDomain not found in User fields
	// Admin not found in User fields
	r.UserType = converters.UserTypeToString(m.UserType)
	// ClientId not found in User fields
	// FederatedIdentity not found in User fields
	// FederatedProvider not found in User fields
	r.CreatedAt = converters.TimeToString(m.CreatedAt)
	r.UpdatedAt = converters.TimeToString(m.UpdatedAt)
	return r, nil
}
