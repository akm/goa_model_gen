// DO NOT EDIT this file.

package model

import (
	"time"
)

type UserType int

const (
	UserTypeViewer        UserType = 0
	UserTypeWriter        UserType = 1
	UserTypeAdministrator UserType = 2
)

var UserTypeMap = map[UserType]string{
	0: "viewer",
	1: "writer",
	2: "administrator",
}

func (t UserType) String() string {
	return UserTypeMap[t]
}

var UserTypeNameToValue = map[string]UserType{
	"viewer":        0,
	"writer":        1,
	"administrator": 2,
}

func StringToUserType(s string) (UserType, error) {
	val, ok := UserTypeNameToValue[s]
	if ok {
		return val, nil
	} else {
		err := InvalidEnumName{Name: s}
		return UserTypeViewer, err
	}
}

func UserTypeToString(v UserType) string {
	return v.String()
}

type User struct {
	ID                string    `datastore:"-" goon:"id" json:"id"`
	Email             string    `json:"email" validate:"required,email"`
	AuthDomain        string    `json:"auth_domain,omitempty"`
	Admin             bool      `json:"admin,omitempty"`
	UserType          UserType  `json:"user_type" validate:"required"`
	ClientId          string    `json:"client_id,omitempty"`
	FederatedIdentity string    `json:"federated_identity,omitempty"`
	FederatedProvider string    `json:"federated_provider,omitempty"`
	CreatedAt         time.Time `json:"created_at" validate:"required"`
	UpdatedAt         time.Time `json:"updated_at" validate:"required"`
}

func (m *User) PrepareToCreate() error {
	if m.CreatedAt.IsZero() {
		m.CreatedAt = time.Now()
	}
	if m.UpdatedAt.IsZero() {
		m.UpdatedAt = time.Now()
	}
	return nil
}

func (m *User) PrepareToUpdate() error {
	m.UpdatedAt = time.Now()
	return nil
}

func (m *User) IsPersisted() bool {
	return m.ID != ""
}
